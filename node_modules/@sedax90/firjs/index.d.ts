declare class ContextMenuView {
    element: HTMLElement;
    items: ContextMenuItem[];
    private constructor();
    static create(position: Vector, items: ContextMenuItem[], context: Context): ContextMenuView;
    private static _createMenuItem;
}

declare enum MouseButton {
    LEFT = "LEFT",
    MIDDLE = "MIDDLE",
    RIGHT = "RIGHT",
    FOURTH = "FOURTH",
    FIFTH = "FIFTH"
}
interface ClickEvent {
    position: Vector;
    target: Element;
}

declare class SequenceView implements ComponentView {
    readonly element: SVGElement;
    readonly parent: SVGElement;
    readonly nodes: Node[];
    readonly width: number;
    readonly height: number;
    readonly joinX: number;
    readonly componentInstances: ComponentInstance[];
    readonly context: Context;
    readonly placeholders: Placeholder[];
    constructor(element: SVGElement, parent: SVGElement, nodes: Node[], width: number, height: number, joinX: number, componentInstances: ComponentInstance[], context: Context, placeholders: Placeholder[]);
    static create(parentElement: SVGElement, nodes: Node[], parentNode: Node | null, context: Context): Promise<SequenceView>;
}

declare class Sequence implements ComponentInstance {
    readonly view: SequenceView;
    readonly context: Context;
    readonly nodes: Node[];
    constructor(view: SequenceView, context: Context, nodes: Node[]);
    parentSequence: Sequence | null;
    static create(sequenceNodes: Node[], parentNode: Node | null, parentElement: SVGElement, context: Context): Promise<Sequence>;
    findByClick(click: ClickEvent): ComponentInstance | null;
    getNodeIndex(node: Node): number;
}

declare class PlaceholderView implements ComponentView {
    readonly element: SVGElement;
    readonly width: number;
    readonly height: number;
    readonly joinX: number;
    static width: number;
    static height: number;
    private constructor();
    private _placeholderGroup;
    static create(parent: SVGElement): PlaceholderView;
    showPlaceholder(): void;
    hidePlaceholder(): void;
    toggleHover(value: boolean): void;
}

declare class Placeholder implements ComponentInstance {
    readonly view: PlaceholderView;
    readonly context: Context;
    readonly index: number;
    private constructor();
    parentSequence: Sequence;
    findByClick(click: ClickEvent): ComponentInstance | null;
    static create(parent: SVGElement, context: Context, index: number): Placeholder;
    show(): void;
    hide(): void;
    setIsHover(value: boolean): void;
}

declare class Observable<T> {
    private _observers;
    private _data;
    constructor(data?: T);
    next(data: T): void;
    subscribe(observerFunction: (data: T) => void): void;
    getValue(): T | undefined;
}

interface ComponentWithView {
    view: ElementView;
}
interface ComponentInstance extends ComponentWithView {
    view: ComponentView;
    context: Context;
    parentSequence: Sequence | null;
    findByClick: (click: ClickEvent) => ComponentInstance | null;
}
interface ElementView {
    element: HTMLElement | SVGElement;
    parent?: HTMLElement | SVGElement;
}
interface ComponentView extends ElementView {
    width: number;
    height: number;
    joinX: number;
    setSelected?: (status: boolean) => void;
    setDragging?: (status: boolean) => void;
}
type NodeType = 'choice' | 'map' | 'start' | 'end' | 'task';
interface Node {
    id: string;
    type: NodeType;
    label?: string;
    icon?: string;
    props?: NodeProps;
}
interface NodeProps {
    [name: string]: unknown;
}
interface MapProps extends NodeProps {
    children: Node[];
}
interface ChoiceProps extends NodeProps {
    choices: Array<Node[]>;
}
interface Vector {
    x: number;
    y: number;
}
interface ComponentWithNode {
    node: Node;
    parentNode: Node | null;
}
interface PublicEvents {
    onNodeSelect?: (event: NodeSelectEvent) => void;
    onNodeDeselect?: (event: NodeDeselectEvent) => void;
    onNodeRemove?: (event: NodeRemoveEvent) => void;
    onTreeChange?: (event: TreeChangeEvent) => void;
    canRemoveNode?: (event: NodeRemoveRequestEvent) => Promise<boolean>;
    canDropNode?: (event: NodeDropEvent) => Promise<boolean>;
}
interface PublicOverriders {
    overrideLabel?: (node: Node) => Promise<string>;
    overrideIcon?: (node: Node) => Promise<string>;
}
interface WorkspaceStyleOptions {
    fontSize: string;
    fontFamily: string;
}
interface WorkspaceInitOptions {
    style: WorkspaceStyleOptions;
    strings: Record<string, string>;
}
interface WorkspaceInit extends PublicEvents {
    parent: HTMLElement;
    tree: Node[];
    options: WorkspaceInitOptions;
    overrideLabel?: (node: Node) => Promise<string>;
    overrideIcon?: (node: Node) => Promise<string>;
}
interface Context {
    tree: Node[];
    designerState: DesignerState;
    options: WorkspaceInitOptions;
    userDefinedListeners?: PublicEvents;
    userDefinedOverriders?: PublicOverriders;
    onDefinitionChange?: (tree: Node[], preservePositionAndScale: boolean) => void;
}
interface DesignerState {
    selectedNode: Observable<ComponentInstance | null>;
    deselectedNode: Observable<ComponentInstance>;
    zoomLevel: number;
    placeholders?: Placeholder[];
    tempNodeToDrop?: Node;
    workspaceRect?: DOMRect;
    isDragging?: boolean;
    isPressingCtrl?: boolean;
    workspacePosition?: Vector;
}
interface ClickInteraction {
    onStart(position: Vector): void;
    onMove(delta: Vector): ClickInteraction | void;
    onEnd(): void;
}
interface WheelInteraction {
    onWheel(delta: number): void;
}
interface KeyboardInteraction {
    onPress(e: KeyboardEvent): void;
    onRelease(e: KeyboardEvent): void;
}
interface GenericNodeEvent {
    node: Node;
    parent: Node | null;
}
interface NodeSelectEvent extends GenericNodeEvent {
}
interface NodeDeselectEvent extends GenericNodeEvent {
}
interface NodeRemoveEvent extends GenericNodeEvent {
}
interface NodeRemoveRequestEvent extends GenericNodeEvent {
}
interface NodeDropEvent extends GenericNodeEvent {
    action: "add" | "move";
}
interface TreeChangeEvent {
    tree: Node[];
}
interface Attributes {
    [name: string]: string | number;
}
interface ContextMenu {
    contextMenu: ContextMenuView;
}
interface ContextMenuItem {
    label: string;
    action: (e: MouseEvent) => void;
}

declare class WorkflowView implements ElementView {
    readonly element: SVGElement;
    readonly parent: HTMLElement | SVGElement;
    readonly context: Context;
    readonly width: number;
    readonly height: number;
    readonly joinX: number;
    private constructor();
    wrapper: SVGElement;
    mainSequence: Sequence;
    static create(parent: HTMLElement, context: Context): Promise<WorkflowView>;
    findComponentByClick(click: ClickEvent): ComponentInstance | null;
    fitAndCenter(): void;
    private static _addSvgDefs;
}

declare class Workflow implements ComponentWithView {
    readonly view: WorkflowView;
    readonly context: Context;
    private constructor();
    findByClick(click: ClickEvent): ComponentInstance | null;
    static create(parent: HTMLElement, context: Context): Promise<Workflow>;
}

declare class WorkspaceView implements ElementView {
    readonly element: HTMLElement;
    readonly parent: HTMLElement;
    readonly context: Context;
    private constructor();
    workflow: Workflow;
    static create(parent: HTMLElement, context: Context): Promise<WorkspaceView>;
    bindClick(handler: (position: Vector, target: Element, buttonIndex: MouseButton) => void): void;
    bindContextMenu(handler: (position: Vector, target: Element) => void): void;
    bindWheel(handler: (e: WheelEvent) => void): void;
    bindKeyboard(handler: (e: KeyboardEvent) => void): void;
}

declare class Workspace implements ComponentWithView {
    view: WorkspaceView;
    readonly context: Context;
    readonly parent: HTMLElement;
    private constructor();
    static init(initData: WorkspaceInit): Promise<Workspace>;
    setTree(tree: Node[], preservePositionAndScale?: boolean): void;
    startDrag(element: HTMLElement | SVGElement, startPosition: Vector, node: Node): void;
    fitAndCenter(): void;
    private _userInteractionController;
    private _setViewBinds;
    private _onDefinitionChange;
    private _onClick;
    private _onContextMenu;
    private _onWheel;
    private _onKeyboard;
    private _clearContextMenus;
    private _onContextMenuRemoveAction;
    private _onContextMenuDuplicateAction;
    private _onContextMenuFitAndCenter;
    private static _getDefaultOptions;
}

declare function init(options: WorkspaceInit): Promise<Workspace>;

export { Attributes, ChoiceProps, ClickInteraction, ComponentInstance, ComponentView, ComponentWithNode, ComponentWithView, Context, ContextMenu, ContextMenuItem, DesignerState, ElementView, KeyboardInteraction, MapProps, Node, NodeDeselectEvent, NodeDropEvent, NodeProps, NodeRemoveEvent, NodeRemoveRequestEvent, NodeSelectEvent, NodeType, TreeChangeEvent, Vector, WheelInteraction, Workspace, WorkspaceInit, WorkspaceInitOptions, WorkspaceStyleOptions, init };
